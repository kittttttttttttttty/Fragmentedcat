{"ast":null,"code":"import _slicedToArray from\"/Users/student/Desktop/Failed Sideprojects/fragmentedcat/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useEffect,useState}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";export default function Admin(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),players=_useState2[0],setPlayers=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),score=_useState4[0],setScore=_useState4[1];var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),message=_useState6[0],setMessage=_useState6[1];var _useState7=useState(undefined),_useState8=_slicedToArray(_useState7,2),selectedPlayer=_useState8[0],setSelectedPlayer=_useState8[1];useEffect(function(){fetch('/.netlify/functions/getPlayers').then(function(response){return response.json();}).then(function(data){setPlayers(data);if(data&&data.length>0){setSelectedPlayer(data[0]);}});},[]);var selectPlayer=function selectPlayer(players){setSelectedPlayer({id:players.value,name:players.options[players.selectedIndex].text});};var addScore=function addScore(){var scoreEntry={playerId:selectedPlayer===null||selectedPlayer===void 0?void 0:selectedPlayer.id,score:score};fetch(\"/.netlify/functions/addScore\",{headers:{'Accept':'application/json','Content-Type':'application/json'},method:\"POST\",body:JSON.stringify(scoreEntry)}).then(function(res){setMessage(\"Leaderboard score of \".concat(score,\" added for player \").concat(selectedPlayer===null||selectedPlayer===void 0?void 0:selectedPlayer.name));}).catch(function(res){setMessage(\"Unable to add score for player \".concat(selectedPlayer===null||selectedPlayer===void 0?void 0:selectedPlayer.name));});};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Admin\"}),/*#__PURE__*/_jsx(\"h4\",{children:\"Add a Leaderboard Entry\"}),players.length===0?/*#__PURE__*/_jsx(\"div\",{children:\"Loading Players...\"}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"mb-3 score-entry\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Player\"}),/*#__PURE__*/_jsx(\"select\",{className:\"form-select\",\"aria-label\":\"player selection\",value:selectedPlayer===null||selectedPlayer===void 0?void 0:selectedPlayer.id,onChange:function onChange(e){return selectPlayer(e.target);},children:players.map(function(p){return/*#__PURE__*/_jsx(\"option\",{value:p.id,children:p.name},p.id);})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"mb-3 score-entry\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Score\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",className:\"form-control\",\"aria-label\":\"score entry\",value:score,onChange:function onChange(e){return setScore(e.target.value);}})]}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-primary\",onClick:addScore,children:\"Add Score\"})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"admin-message\",children:message})]});}","map":{"version":3,"sources":["/Users/student/Desktop/Failed Sideprojects/fragmentedcat/src/Admin.tsx"],"names":["React","useEffect","useState","Admin","players","setPlayers","score","setScore","message","setMessage","undefined","selectedPlayer","setSelectedPlayer","fetch","then","response","json","data","length","selectPlayer","id","value","name","options","selectedIndex","text","addScore","scoreEntry","playerId","headers","method","body","JSON","stringify","res","catch","e","target","map","p"],"mappings":"8IAAA,MAAOA,CAAAA,KAAP,EAAeC,SAAf,CAA0BC,QAA1B,KAAyC,OAAzC,C,6IAOA,cAAe,SAASC,CAAAA,KAAT,EAAiB,CAC5B,cAA8BD,QAAQ,CAAC,EAAD,CAAtC,wCAAOE,OAAP,eAAgBC,UAAhB,eACA,eAA0BH,QAAQ,CAAC,EAAD,CAAlC,yCAAOI,KAAP,eAAcC,QAAd,eACA,eAA8BL,QAAQ,CAAC,EAAD,CAAtC,yCAAOM,OAAP,eAAgBC,UAAhB,eACA,eAA4CP,QAAQ,CAAqBQ,SAArB,CAApD,yCAAOC,cAAP,eAAuBC,iBAAvB,eAEAX,SAAS,CAAC,UAAM,CACZY,KAAK,CAAC,gCAAD,CAAL,CACKC,IADL,CACU,SAAAC,QAAQ,QAAIA,CAAAA,QAAQ,CAACC,IAAT,EAAJ,EADlB,EAEKF,IAFL,CAEU,SAAAG,IAAI,CAAI,CACVZ,UAAU,CAACY,IAAD,CAAV,CACA,GAAGA,IAAI,EAAIA,IAAI,CAACC,MAAL,CAAc,CAAzB,CAA4B,CACxBN,iBAAiB,CAACK,IAAI,CAAC,CAAD,CAAL,CAAjB,CACH,CACJ,CAPL,EAQH,CATQ,CASN,EATM,CAAT,CAWA,GAAME,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACf,OAAD,CAAgC,CACjDQ,iBAAiB,CAAC,CACdQ,EAAE,CAAEhB,OAAO,CAACiB,KADE,CAEdC,IAAI,CAAElB,OAAO,CAACmB,OAAR,CAAgBnB,OAAO,CAACoB,aAAxB,EAAuCC,IAF/B,CAAD,CAAjB,CAIH,CALD,CAOA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,CACnB,GAAMC,CAAAA,UAAU,CAAG,CACfC,QAAQ,CAAEjB,cAAF,SAAEA,cAAF,iBAAEA,cAAc,CAAES,EADX,CAEfd,KAAK,CAAEA,KAFQ,CAAnB,CAKAO,KAAK,CAAC,8BAAD,CACD,CACIgB,OAAO,CAAE,CACL,SAAU,kBADL,CAEL,eAAgB,kBAFX,CADb,CAKIC,MAAM,CAAE,MALZ,CAMIC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAeN,UAAf,CANV,CADC,CAAL,CASKb,IATL,CASU,SAASoB,GAAT,CAAa,CACfzB,UAAU,gCAAyBH,KAAzB,8BAAmDK,cAAnD,SAAmDA,cAAnD,iBAAmDA,cAAc,CAAEW,IAAnE,EAAV,CACH,CAXL,EAYKa,KAZL,CAYW,SAASD,GAAT,CAAa,CAChBzB,UAAU,0CAAmCE,cAAnC,SAAmCA,cAAnC,iBAAmCA,cAAc,CAAEW,IAAnD,EAAV,CACH,CAdL,EAeH,CArBD,CAuBA,mBAAO,wCACH,6BADG,cAEH,+CAFG,CAGFlB,OAAO,CAACc,MAAR,GAAmB,CAAnB,cACG,2CADH,cAGG,wCACA,aAAK,SAAS,CAAC,kBAAf,wBACI,iCADJ,cAEI,eACI,SAAS,CAAC,aADd,CAEI,aAAW,kBAFf,CAGI,KAAK,CAAEP,cAAF,SAAEA,cAAF,iBAAEA,cAAc,CAAES,EAH3B,CAII,QAAQ,CAAE,kBAAAgB,CAAC,QAAIjB,CAAAA,YAAY,CAACiB,CAAC,CAACC,MAAH,CAAhB,EAJf,UAKKjC,OAAO,CAACkC,GAAR,CAAY,SAAAC,CAAC,qBAAI,eAAmB,KAAK,CAAEA,CAAC,CAACnB,EAA5B,UACbmB,CAAC,CAACjB,IADW,EAAaiB,CAAC,CAACnB,EAAf,CAAJ,EAAb,CALL,EAFJ,GADA,cAaA,aAAK,SAAS,CAAC,kBAAf,wBACI,gCADJ,cAEI,cAAO,IAAI,CAAC,MAAZ,CACO,SAAS,CAAC,cADjB,CAEO,aAAW,aAFlB,CAGO,KAAK,CAAEd,KAHd,CAIO,QAAQ,CAAE,kBAAA8B,CAAC,QAAI7B,CAAAA,QAAQ,CAAC6B,CAAC,CAACC,MAAF,CAAShB,KAAV,CAAZ,EAJlB,EAFJ,GAbA,cAqBA,kCACI,eAAQ,SAAS,CAAC,iBAAlB,CAAoC,OAAO,CAAEK,QAA7C,uBADJ,EArBA,GAND,cAgCH,YAAK,SAAS,CAAC,eAAf,UAAgClB,OAAhC,EAhCG,GAAP,CAkCH","sourcesContent":["import React, {useEffect, useState} from 'react';\n\ninterface Player {\n    id: string,\n    name: string,\n}\n\nexport default function Admin() {\n    const [players, setPlayers] = useState([] as Player[]);\n    const [score, setScore] = useState(\"\");\n    const [message, setMessage] = useState(\"\");\n    const [selectedPlayer, setSelectedPlayer] = useState<Player | undefined>(undefined);\n    \n    useEffect(() => {\n        fetch('/.netlify/functions/getPlayers')\n            .then(response => response.json() as Promise<Player[]>)\n            .then(data => {\n                setPlayers(data);\n                if(data && data.length > 0) {\n                    setSelectedPlayer(data[0]);\n                }\n            });\n    }, []);\n\n    const selectPlayer = (players: HTMLSelectElement) => {\n        setSelectedPlayer({\n            id: players.value,\n            name: players.options[players.selectedIndex].text\n        });\n    }\n\n    const addScore = () => {\n        const scoreEntry = {\n            playerId: selectedPlayer?.id,\n            score: score\n        }\n\n        fetch(\"/.netlify/functions/addScore\",\n            {\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                method: \"POST\",\n                body: JSON.stringify(scoreEntry)\n            })\n            .then(function(res){\n                setMessage(`Leaderboard score of ${score} added for player ${selectedPlayer?.name}`);\n            })\n            .catch(function(res){\n                setMessage(`Unable to add score for player ${selectedPlayer?.name}`);\n            })\n    }\n\n    return <>\n        <h2>Admin</h2>\n        <h4>Add a Leaderboard Entry</h4>\n        {players.length === 0 ?\n            <div>Loading Players...</div>\n            :\n            <>\n            <div className=\"mb-3 score-entry\">\n                <label>Player</label>\n                <select\n                    className=\"form-select\"\n                    aria-label=\"player selection\"\n                    value={selectedPlayer?.id}\n                    onChange={e => selectPlayer(e.target)}>\n                    {players.map(p => <option key={p.id} value={p.id}>\n                        {p.name}\n                    </option>)}\n                </select>\n            </div>\n            <div className=\"mb-3 score-entry\">\n                <label>Score</label>\n                <input type=\"text\"\n                       className=\"form-control\"\n                       aria-label=\"score entry\"\n                       value={score}\n                       onChange={e => setScore(e.target.value)}/>\n            </div>\n            <div>\n                <button className=\"btn btn-primary\" onClick={addScore}>Add Score</button>\n            </div>\n            </>\n        }\n        <div className=\"admin-message\">{message}</div>\n    </>\n}\n\n"]},"metadata":{},"sourceType":"module"}